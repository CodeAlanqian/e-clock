// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2022 13:39:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cnt100plus
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cnt100plus_vlg_sample_tst(
	clk_in_100,
	sampler_tx
);
input  clk_in_100;
output sampler_tx;

reg sample;
time current_time;
always @(clk_in_100)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cnt100plus_vlg_check_tst (
	clk_out_1,
	s11,
	s12,
	s13,
	s14,
	s15,
	s16,
	s17,
	s18,
	sampler_rx
);
input  clk_out_1;
input  s11;
input  s12;
input  s13;
input  s14;
input  s15;
input  s16;
input  s17;
input  s18;
input sampler_rx;

reg  clk_out_1_expected;
reg  s11_expected;
reg  s12_expected;
reg  s13_expected;
reg  s14_expected;
reg  s15_expected;
reg  s16_expected;
reg  s17_expected;
reg  s18_expected;

reg  clk_out_1_prev;
reg  s11_prev;
reg  s12_prev;
reg  s13_prev;
reg  s14_prev;
reg  s15_prev;
reg  s16_prev;
reg  s17_prev;
reg  s18_prev;

reg  clk_out_1_expected_prev;
reg  s11_expected_prev;
reg  s12_expected_prev;
reg  s13_expected_prev;
reg  s14_expected_prev;
reg  s15_expected_prev;
reg  s16_expected_prev;
reg  s17_expected_prev;
reg  s18_expected_prev;

reg  last_clk_out_1_exp;
reg  last_s11_exp;
reg  last_s12_exp;
reg  last_s13_exp;
reg  last_s14_exp;
reg  last_s15_exp;
reg  last_s16_exp;
reg  last_s17_exp;
reg  last_s18_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	clk_out_1_prev = clk_out_1;
	s11_prev = s11;
	s12_prev = s12;
	s13_prev = s13;
	s14_prev = s14;
	s15_prev = s15;
	s16_prev = s16;
	s17_prev = s17;
	s18_prev = s18;
end

// update expected /o prevs

always @(trigger)
begin
	clk_out_1_expected_prev = clk_out_1_expected;
	s11_expected_prev = s11_expected;
	s12_expected_prev = s12_expected;
	s13_expected_prev = s13_expected;
	s14_expected_prev = s14_expected;
	s15_expected_prev = s15_expected;
	s16_expected_prev = s16_expected;
	s17_expected_prev = s17_expected;
	s18_expected_prev = s18_expected;
end



// expected clk_out_1
initial
begin
	clk_out_1_expected = 1'bX;
end 

// expected s11
initial
begin
	s11_expected = 1'bX;
end 

// expected s12
initial
begin
	s12_expected = 1'bX;
end 

// expected s13
initial
begin
	s13_expected = 1'bX;
end 

// expected s14
initial
begin
	s14_expected = 1'bX;
end 

// expected s15
initial
begin
	s15_expected = 1'bX;
end 

// expected s16
initial
begin
	s16_expected = 1'bX;
end 

// expected s17
initial
begin
	s17_expected = 1'bX;
end 

// expected s18
initial
begin
	s18_expected = 1'bX;
end 
// generate trigger
always @(clk_out_1_expected or clk_out_1 or s11_expected or s11 or s12_expected or s12 or s13_expected or s13 or s14_expected or s14 or s15_expected or s15 or s16_expected or s16 or s17_expected or s17 or s18_expected or s18)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clk_out_1 = %b | expected s11 = %b | expected s12 = %b | expected s13 = %b | expected s14 = %b | expected s15 = %b | expected s16 = %b | expected s17 = %b | expected s18 = %b | ",clk_out_1_expected_prev,s11_expected_prev,s12_expected_prev,s13_expected_prev,s14_expected_prev,s15_expected_prev,s16_expected_prev,s17_expected_prev,s18_expected_prev);
	$display("| real clk_out_1 = %b | real s11 = %b | real s12 = %b | real s13 = %b | real s14 = %b | real s15 = %b | real s16 = %b | real s17 = %b | real s18 = %b | ",clk_out_1_prev,s11_prev,s12_prev,s13_prev,s14_prev,s15_prev,s16_prev,s17_prev,s18_prev);
`endif
	if (
		( clk_out_1_expected_prev !== 1'bx ) && ( clk_out_1_prev !== clk_out_1_expected_prev )
		&& ((clk_out_1_expected_prev !== last_clk_out_1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_out_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_out_1_expected_prev);
		$display ("     Real value = %b", clk_out_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clk_out_1_exp = clk_out_1_expected_prev;
	end
	if (
		( s11_expected_prev !== 1'bx ) && ( s11_prev !== s11_expected_prev )
		&& ((s11_expected_prev !== last_s11_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s11_expected_prev);
		$display ("     Real value = %b", s11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s11_exp = s11_expected_prev;
	end
	if (
		( s12_expected_prev !== 1'bx ) && ( s12_prev !== s12_expected_prev )
		&& ((s12_expected_prev !== last_s12_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s12_expected_prev);
		$display ("     Real value = %b", s12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s12_exp = s12_expected_prev;
	end
	if (
		( s13_expected_prev !== 1'bx ) && ( s13_prev !== s13_expected_prev )
		&& ((s13_expected_prev !== last_s13_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s13_expected_prev);
		$display ("     Real value = %b", s13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s13_exp = s13_expected_prev;
	end
	if (
		( s14_expected_prev !== 1'bx ) && ( s14_prev !== s14_expected_prev )
		&& ((s14_expected_prev !== last_s14_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s14_expected_prev);
		$display ("     Real value = %b", s14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_s14_exp = s14_expected_prev;
	end
	if (
		( s15_expected_prev !== 1'bx ) && ( s15_prev !== s15_expected_prev )
		&& ((s15_expected_prev !== last_s15_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s15_expected_prev);
		$display ("     Real value = %b", s15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s15_exp = s15_expected_prev;
	end
	if (
		( s16_expected_prev !== 1'bx ) && ( s16_prev !== s16_expected_prev )
		&& ((s16_expected_prev !== last_s16_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s16 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s16_expected_prev);
		$display ("     Real value = %b", s16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s16_exp = s16_expected_prev;
	end
	if (
		( s17_expected_prev !== 1'bx ) && ( s17_prev !== s17_expected_prev )
		&& ((s17_expected_prev !== last_s17_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s17 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s17_expected_prev);
		$display ("     Real value = %b", s17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s17_exp = s17_expected_prev;
	end
	if (
		( s18_expected_prev !== 1'bx ) && ( s18_prev !== s18_expected_prev )
		&& ((s18_expected_prev !== last_s18_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s18 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s18_expected_prev);
		$display ("     Real value = %b", s18_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_s18_exp = s18_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cnt100plus_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_in_100;
// wires                                               
wire clk_out_1;
wire s11;
wire s12;
wire s13;
wire s14;
wire s15;
wire s16;
wire s17;
wire s18;

wire sampler;                             

// assign statements (if any)                          
cnt100plus i1 (
// port map - connection between master ports and signals/registers   
	.clk_in_100(clk_in_100),
	.clk_out_1(clk_out_1),
	.s11(s11),
	.s12(s12),
	.s13(s13),
	.s14(s14),
	.s15(s15),
	.s16(s16),
	.s17(s17),
	.s18(s18)
);

// clk_in_100
always
begin
	clk_in_100 = 1'b0;
	clk_in_100 = #5000 1'b1;
	#5000;
end 

cnt100plus_vlg_sample_tst tb_sample (
	.clk_in_100(clk_in_100),
	.sampler_tx(sampler)
);

cnt100plus_vlg_check_tst tb_out(
	.clk_out_1(clk_out_1),
	.s11(s11),
	.s12(s12),
	.s13(s13),
	.s14(s14),
	.s15(s15),
	.s16(s16),
	.s17(s17),
	.s18(s18),
	.sampler_rx(sampler)
);
endmodule

