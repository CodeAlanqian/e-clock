// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/26/2023 07:26:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    hour12
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hour12_vlg_sample_tst(
	Hent,
	hour_clk,
	K3,
	RD,
	SC,
	sampler_tx
);
input  Hent;
input  hour_clk;
input  K3;
input  RD;
input  SC;
output sampler_tx;

reg sample;
time current_time;
always @(Hent or hour_clk or K3 or RD or SC)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module hour12_vlg_check_tst (
	HC,
	HH,
	HL,
	sampler_rx
);
input  HC;
input [3:0] HH;
input [3:0] HL;
input sampler_rx;

reg  HC_expected;
reg [3:0] HH_expected;
reg [3:0] HL_expected;

reg  HC_prev;
reg [3:0] HH_prev;
reg [3:0] HL_prev;

reg  HC_expected_prev;
reg [3:0] HH_expected_prev;
reg [3:0] HL_expected_prev;

reg  last_HC_exp;
reg [3:0] last_HH_exp;
reg [3:0] last_HL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	HC_prev = HC;
	HH_prev = HH;
	HL_prev = HL;
end

// update expected /o prevs

always @(trigger)
begin
	HC_expected_prev = HC_expected;
	HH_expected_prev = HH_expected;
	HL_expected_prev = HL_expected;
end


// expected HH[ 3 ]
initial
begin
	HH_expected[3] = 1'bX;
end 
// expected HH[ 2 ]
initial
begin
	HH_expected[2] = 1'bX;
end 
// expected HH[ 1 ]
initial
begin
	HH_expected[1] = 1'bX;
end 
// expected HH[ 0 ]
initial
begin
	HH_expected[0] = 1'bX;
end 
// expected HL[ 3 ]
initial
begin
	HL_expected[3] = 1'bX;
end 
// expected HL[ 2 ]
initial
begin
	HL_expected[2] = 1'bX;
end 
// expected HL[ 1 ]
initial
begin
	HL_expected[1] = 1'bX;
end 
// expected HL[ 0 ]
initial
begin
	HL_expected[0] = 1'bX;
end 

// expected HC
initial
begin
	HC_expected = 1'bX;
end 
// generate trigger
always @(HC_expected or HC or HH_expected or HH or HL_expected or HL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HC = %b | expected HH = %b | expected HL = %b | ",HC_expected_prev,HH_expected_prev,HL_expected_prev);
	$display("| real HC = %b | real HH = %b | real HL = %b | ",HC_prev,HH_prev,HL_prev);
`endif
	if (
		( HC_expected_prev !== 1'bx ) && ( HC_prev !== HC_expected_prev )
		&& ((HC_expected_prev !== last_HC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HC_expected_prev);
		$display ("     Real value = %b", HC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HC_exp = HC_expected_prev;
	end
	if (
		( HH_expected_prev[0] !== 1'bx ) && ( HH_prev[0] !== HH_expected_prev[0] )
		&& ((HH_expected_prev[0] !== last_HH_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HH_expected_prev);
		$display ("     Real value = %b", HH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HH_exp[0] = HH_expected_prev[0];
	end
	if (
		( HH_expected_prev[1] !== 1'bx ) && ( HH_prev[1] !== HH_expected_prev[1] )
		&& ((HH_expected_prev[1] !== last_HH_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HH_expected_prev);
		$display ("     Real value = %b", HH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HH_exp[1] = HH_expected_prev[1];
	end
	if (
		( HH_expected_prev[2] !== 1'bx ) && ( HH_prev[2] !== HH_expected_prev[2] )
		&& ((HH_expected_prev[2] !== last_HH_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HH_expected_prev);
		$display ("     Real value = %b", HH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HH_exp[2] = HH_expected_prev[2];
	end
	if (
		( HH_expected_prev[3] !== 1'bx ) && ( HH_prev[3] !== HH_expected_prev[3] )
		&& ((HH_expected_prev[3] !== last_HH_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HH_expected_prev);
		$display ("     Real value = %b", HH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HH_exp[3] = HH_expected_prev[3];
	end
	if (
		( HL_expected_prev[0] !== 1'bx ) && ( HL_prev[0] !== HL_expected_prev[0] )
		&& ((HL_expected_prev[0] !== last_HL_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HL_expected_prev);
		$display ("     Real value = %b", HL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HL_exp[0] = HL_expected_prev[0];
	end
	if (
		( HL_expected_prev[1] !== 1'bx ) && ( HL_prev[1] !== HL_expected_prev[1] )
		&& ((HL_expected_prev[1] !== last_HL_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HL_expected_prev);
		$display ("     Real value = %b", HL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HL_exp[1] = HL_expected_prev[1];
	end
	if (
		( HL_expected_prev[2] !== 1'bx ) && ( HL_prev[2] !== HL_expected_prev[2] )
		&& ((HL_expected_prev[2] !== last_HL_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HL_expected_prev);
		$display ("     Real value = %b", HL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HL_exp[2] = HL_expected_prev[2];
	end
	if (
		( HL_expected_prev[3] !== 1'bx ) && ( HL_prev[3] !== HL_expected_prev[3] )
		&& ((HL_expected_prev[3] !== last_HL_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HL_expected_prev);
		$display ("     Real value = %b", HL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HL_exp[3] = HL_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module hour12_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Hent;
reg hour_clk;
reg K3;
reg RD;
reg SC;
// wires                                               
wire HC;
wire [3:0] HH;
wire [3:0] HL;

wire sampler;                             

// assign statements (if any)                          
hour12 i1 (
// port map - connection between master ports and signals/registers   
	.HC(HC),
	.Hent(Hent),
	.HH(HH),
	.HL(HL),
	.hour_clk(hour_clk),
	.K3(K3),
	.RD(RD),
	.SC(SC)
);

// hour_clk
initial
begin
	repeat(22)
	begin
		hour_clk = 1'b0;
		hour_clk = #22500 1'b1;
		# 22500;
	end
	hour_clk = 1'b0;
end 

// Hent
initial
begin
	Hent = 1'b1;
end 

// K3
initial
begin
	K3 = 1'b0;
end 

// RD
initial
begin
	RD = 1'b1;
end 

// SC
initial
begin
	SC = 1'b0;
end 

hour12_vlg_sample_tst tb_sample (
	.Hent(Hent),
	.hour_clk(hour_clk),
	.K3(K3),
	.RD(RD),
	.SC(SC),
	.sampler_tx(sampler)
);

hour12_vlg_check_tst tb_out(
	.HC(HC),
	.HH(HH),
	.HL(HL),
	.sampler_rx(sampler)
);
endmodule

