// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/25/2023 23:40:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    min
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module min_vlg_sample_tst(
	K3,
	Ment,
	min_clk,
	RD,
	SC,
	sampler_tx
);
input  K3;
input  Ment;
input  min_clk;
input  RD;
input  SC;
output sampler_tx;

reg sample;
time current_time;
always @(K3 or Ment or min_clk or RD or SC)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module min_vlg_check_tst (
	MC,
	MH,
	ML,
	sampler_rx
);
input  MC;
input [3:0] MH;
input [3:0] ML;
input sampler_rx;

reg  MC_expected;
reg [3:0] MH_expected;
reg [3:0] ML_expected;

reg  MC_prev;
reg [3:0] MH_prev;
reg [3:0] ML_prev;

reg  MC_expected_prev;
reg [3:0] MH_expected_prev;
reg [3:0] ML_expected_prev;

reg  last_MC_exp;
reg [3:0] last_MH_exp;
reg [3:0] last_ML_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	MC_prev = MC;
	MH_prev = MH;
	ML_prev = ML;
end

// update expected /o prevs

always @(trigger)
begin
	MC_expected_prev = MC_expected;
	MH_expected_prev = MH_expected;
	ML_expected_prev = ML_expected;
end


// expected MH[ 3 ]
initial
begin
	MH_expected[3] = 1'bX;
end 
// expected MH[ 2 ]
initial
begin
	MH_expected[2] = 1'bX;
end 
// expected MH[ 1 ]
initial
begin
	MH_expected[1] = 1'bX;
end 
// expected MH[ 0 ]
initial
begin
	MH_expected[0] = 1'bX;
end 
// expected ML[ 3 ]
initial
begin
	ML_expected[3] = 1'bX;
end 
// expected ML[ 2 ]
initial
begin
	ML_expected[2] = 1'bX;
end 
// expected ML[ 1 ]
initial
begin
	ML_expected[1] = 1'bX;
end 
// expected ML[ 0 ]
initial
begin
	ML_expected[0] = 1'bX;
end 

// expected MC
initial
begin
	MC_expected = 1'bX;
end 
// generate trigger
always @(MC_expected or MC or MH_expected or MH or ML_expected or ML)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MC = %b | expected MH = %b | expected ML = %b | ",MC_expected_prev,MH_expected_prev,ML_expected_prev);
	$display("| real MC = %b | real MH = %b | real ML = %b | ",MC_prev,MH_prev,ML_prev);
`endif
	if (
		( MC_expected_prev !== 1'bx ) && ( MC_prev !== MC_expected_prev )
		&& ((MC_expected_prev !== last_MC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp = MC_expected_prev;
	end
	if (
		( MH_expected_prev[0] !== 1'bx ) && ( MH_prev[0] !== MH_expected_prev[0] )
		&& ((MH_expected_prev[0] !== last_MH_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MH_expected_prev);
		$display ("     Real value = %b", MH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MH_exp[0] = MH_expected_prev[0];
	end
	if (
		( MH_expected_prev[1] !== 1'bx ) && ( MH_prev[1] !== MH_expected_prev[1] )
		&& ((MH_expected_prev[1] !== last_MH_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MH_expected_prev);
		$display ("     Real value = %b", MH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MH_exp[1] = MH_expected_prev[1];
	end
	if (
		( MH_expected_prev[2] !== 1'bx ) && ( MH_prev[2] !== MH_expected_prev[2] )
		&& ((MH_expected_prev[2] !== last_MH_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MH_expected_prev);
		$display ("     Real value = %b", MH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MH_exp[2] = MH_expected_prev[2];
	end
	if (
		( MH_expected_prev[3] !== 1'bx ) && ( MH_prev[3] !== MH_expected_prev[3] )
		&& ((MH_expected_prev[3] !== last_MH_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MH_expected_prev);
		$display ("     Real value = %b", MH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MH_exp[3] = MH_expected_prev[3];
	end
	if (
		( ML_expected_prev[0] !== 1'bx ) && ( ML_prev[0] !== ML_expected_prev[0] )
		&& ((ML_expected_prev[0] !== last_ML_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ML[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ML_expected_prev);
		$display ("     Real value = %b", ML_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ML_exp[0] = ML_expected_prev[0];
	end
	if (
		( ML_expected_prev[1] !== 1'bx ) && ( ML_prev[1] !== ML_expected_prev[1] )
		&& ((ML_expected_prev[1] !== last_ML_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ML[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ML_expected_prev);
		$display ("     Real value = %b", ML_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ML_exp[1] = ML_expected_prev[1];
	end
	if (
		( ML_expected_prev[2] !== 1'bx ) && ( ML_prev[2] !== ML_expected_prev[2] )
		&& ((ML_expected_prev[2] !== last_ML_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ML[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ML_expected_prev);
		$display ("     Real value = %b", ML_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ML_exp[2] = ML_expected_prev[2];
	end
	if (
		( ML_expected_prev[3] !== 1'bx ) && ( ML_prev[3] !== ML_expected_prev[3] )
		&& ((ML_expected_prev[3] !== last_ML_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ML[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ML_expected_prev);
		$display ("     Real value = %b", ML_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ML_exp[3] = ML_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module min_vlg_vec_tst();
// constants                                           
// general purpose registers
reg K3;
reg Ment;
reg min_clk;
reg RD;
reg SC;
// wires                                               
wire MC;
wire [3:0] MH;
wire [3:0] ML;

wire sampler;                             

// assign statements (if any)                          
min i1 (
// port map - connection between master ports and signals/registers   
	.K3(K3),
	.MC(MC),
	.Ment(Ment),
	.MH(MH),
	.min_clk(min_clk),
	.ML(ML),
	.RD(RD),
	.SC(SC)
);

// min_clk
initial
begin
	repeat(66)
	begin
		min_clk = 1'b0;
		min_clk = #7500 1'b1;
		# 7500;
	end
	min_clk = 1'b0;
	min_clk = #7500 1'b1;
end 

// K3
initial
begin
	K3 = 1'b0;
end 

// Ment
initial
begin
	Ment = 1'b1;
end 

// RD
initial
begin
	RD = 1'b1;
end 

// SC
initial
begin
	SC = 1'b0;
end 

min_vlg_sample_tst tb_sample (
	.K3(K3),
	.Ment(Ment),
	.min_clk(min_clk),
	.RD(RD),
	.SC(SC),
	.sampler_tx(sampler)
);

min_vlg_check_tst tb_out(
	.MC(MC),
	.MH(MH),
	.ML(ML),
	.sampler_rx(sampler)
);
endmodule

