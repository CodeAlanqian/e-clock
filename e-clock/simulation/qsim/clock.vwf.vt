// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2022 13:44:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CLOCK
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CLOCK_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CLOCK_vlg_check_tst (
	a,
	b,
	c,
	d,
	k,
	pin_name1,
	pin_name2,
	pin_name3,
	pin_name4,
	pin_name5,
	pin_name6,
	pin_name7,
	pin_name8,
	POS1,
	sampler_rx
);
input  a;
input  b;
input  c;
input  d;
input  k;
input  pin_name1;
input  pin_name2;
input  pin_name3;
input  pin_name4;
input  pin_name5;
input  pin_name6;
input  pin_name7;
input  pin_name8;
input  POS1;
input sampler_rx;

reg  a_expected;
reg  b_expected;
reg  c_expected;
reg  d_expected;
reg  k_expected;
reg  pin_name1_expected;
reg  pin_name2_expected;
reg  pin_name3_expected;
reg  pin_name4_expected;
reg  pin_name5_expected;
reg  pin_name6_expected;
reg  pin_name7_expected;
reg  pin_name8_expected;
reg  POS1_expected;

reg  a_prev;
reg  b_prev;
reg  c_prev;
reg  d_prev;
reg  k_prev;
reg  pin_name1_prev;
reg  pin_name2_prev;
reg  pin_name3_prev;
reg  pin_name4_prev;
reg  pin_name5_prev;
reg  pin_name6_prev;
reg  pin_name7_prev;
reg  pin_name8_prev;
reg  POS1_prev;

reg  a_expected_prev;
reg  b_expected_prev;
reg  c_expected_prev;
reg  d_expected_prev;
reg  k_expected_prev;
reg  pin_name1_expected_prev;
reg  pin_name2_expected_prev;
reg  pin_name3_expected_prev;
reg  pin_name4_expected_prev;
reg  pin_name5_expected_prev;
reg  pin_name6_expected_prev;
reg  pin_name7_expected_prev;
reg  pin_name8_expected_prev;
reg  POS1_expected_prev;

reg  last_a_exp;
reg  last_b_exp;
reg  last_c_exp;
reg  last_d_exp;
reg  last_k_exp;
reg  last_pin_name1_exp;
reg  last_pin_name2_exp;
reg  last_pin_name3_exp;
reg  last_pin_name4_exp;
reg  last_pin_name5_exp;
reg  last_pin_name6_exp;
reg  last_pin_name7_exp;
reg  last_pin_name8_exp;
reg  last_POS1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	c_prev = c;
	d_prev = d;
	k_prev = k;
	pin_name1_prev = pin_name1;
	pin_name2_prev = pin_name2;
	pin_name3_prev = pin_name3;
	pin_name4_prev = pin_name4;
	pin_name5_prev = pin_name5;
	pin_name6_prev = pin_name6;
	pin_name7_prev = pin_name7;
	pin_name8_prev = pin_name8;
	POS1_prev = POS1;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	d_expected_prev = d_expected;
	k_expected_prev = k_expected;
	pin_name1_expected_prev = pin_name1_expected;
	pin_name2_expected_prev = pin_name2_expected;
	pin_name3_expected_prev = pin_name3_expected;
	pin_name4_expected_prev = pin_name4_expected;
	pin_name5_expected_prev = pin_name5_expected;
	pin_name6_expected_prev = pin_name6_expected;
	pin_name7_expected_prev = pin_name7_expected;
	pin_name8_expected_prev = pin_name8_expected;
	POS1_expected_prev = POS1_expected;
end



// expected a
initial
begin
	a_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected k
initial
begin
	k_expected = 1'bX;
end 

// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
end 

// expected pin_name2
initial
begin
	pin_name2_expected = 1'bX;
end 

// expected pin_name3
initial
begin
	pin_name3_expected = 1'bX;
end 

// expected pin_name4
initial
begin
	pin_name4_expected = 1'bX;
end 

// expected pin_name5
initial
begin
	pin_name5_expected = 1'bX;
end 

// expected pin_name6
initial
begin
	pin_name6_expected = 1'bX;
end 

// expected pin_name7
initial
begin
	pin_name7_expected = 1'bX;
end 

// expected pin_name8
initial
begin
	pin_name8_expected = 1'bX;
end 

// expected POS1
initial
begin
	POS1_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or c_expected or c or d_expected or d or k_expected or k or pin_name1_expected or pin_name1 or pin_name2_expected or pin_name2 or pin_name3_expected or pin_name3 or pin_name4_expected or pin_name4 or pin_name5_expected or pin_name5 or pin_name6_expected or pin_name6 or pin_name7_expected or pin_name7 or pin_name8_expected or pin_name8 or POS1_expected or POS1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected c = %b | expected d = %b | expected k = %b | expected pin_name1 = %b | expected pin_name2 = %b | expected pin_name3 = %b | expected pin_name4 = %b | expected pin_name5 = %b | expected pin_name6 = %b | expected pin_name7 = %b | expected pin_name8 = %b | expected POS1 = %b | ",a_expected_prev,b_expected_prev,c_expected_prev,d_expected_prev,k_expected_prev,pin_name1_expected_prev,pin_name2_expected_prev,pin_name3_expected_prev,pin_name4_expected_prev,pin_name5_expected_prev,pin_name6_expected_prev,pin_name7_expected_prev,pin_name8_expected_prev,POS1_expected_prev);
	$display("| real a = %b | real b = %b | real c = %b | real d = %b | real k = %b | real pin_name1 = %b | real pin_name2 = %b | real pin_name3 = %b | real pin_name4 = %b | real pin_name5 = %b | real pin_name6 = %b | real pin_name7 = %b | real pin_name8 = %b | real POS1 = %b | ",a_prev,b_prev,c_prev,d_prev,k_prev,pin_name1_prev,pin_name2_prev,pin_name3_prev,pin_name4_prev,pin_name5_prev,pin_name6_prev,pin_name7_prev,pin_name8_prev,POS1_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( k_expected_prev !== 1'bx ) && ( k_prev !== k_expected_prev )
		&& ((k_expected_prev !== last_k_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port k :: @time = %t",  $realtime);
		$display ("     Expected value = %b", k_expected_prev);
		$display ("     Real value = %b", k_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_k_exp = k_expected_prev;
	end
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end
	if (
		( pin_name2_expected_prev !== 1'bx ) && ( pin_name2_prev !== pin_name2_expected_prev )
		&& ((pin_name2_expected_prev !== last_pin_name2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name2_expected_prev);
		$display ("     Real value = %b", pin_name2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pin_name2_exp = pin_name2_expected_prev;
	end
	if (
		( pin_name3_expected_prev !== 1'bx ) && ( pin_name3_prev !== pin_name3_expected_prev )
		&& ((pin_name3_expected_prev !== last_pin_name3_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name3_expected_prev);
		$display ("     Real value = %b", pin_name3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pin_name3_exp = pin_name3_expected_prev;
	end
	if (
		( pin_name4_expected_prev !== 1'bx ) && ( pin_name4_prev !== pin_name4_expected_prev )
		&& ((pin_name4_expected_prev !== last_pin_name4_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name4_expected_prev);
		$display ("     Real value = %b", pin_name4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pin_name4_exp = pin_name4_expected_prev;
	end
	if (
		( pin_name5_expected_prev !== 1'bx ) && ( pin_name5_prev !== pin_name5_expected_prev )
		&& ((pin_name5_expected_prev !== last_pin_name5_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name5_expected_prev);
		$display ("     Real value = %b", pin_name5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_pin_name5_exp = pin_name5_expected_prev;
	end
	if (
		( pin_name6_expected_prev !== 1'bx ) && ( pin_name6_prev !== pin_name6_expected_prev )
		&& ((pin_name6_expected_prev !== last_pin_name6_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name6_expected_prev);
		$display ("     Real value = %b", pin_name6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_pin_name6_exp = pin_name6_expected_prev;
	end
	if (
		( pin_name7_expected_prev !== 1'bx ) && ( pin_name7_prev !== pin_name7_expected_prev )
		&& ((pin_name7_expected_prev !== last_pin_name7_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name7_expected_prev);
		$display ("     Real value = %b", pin_name7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pin_name7_exp = pin_name7_expected_prev;
	end
	if (
		( pin_name8_expected_prev !== 1'bx ) && ( pin_name8_prev !== pin_name8_expected_prev )
		&& ((pin_name8_expected_prev !== last_pin_name8_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name8_expected_prev);
		$display ("     Real value = %b", pin_name8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pin_name8_exp = pin_name8_expected_prev;
	end
	if (
		( POS1_expected_prev !== 1'bx ) && ( POS1_prev !== POS1_expected_prev )
		&& ((POS1_expected_prev !== last_POS1_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port POS1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", POS1_expected_prev);
		$display ("     Real value = %b", POS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_POS1_exp = POS1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CLOCK_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire k;
wire pin_name1;
wire pin_name2;
wire pin_name3;
wire pin_name4;
wire pin_name5;
wire pin_name6;
wire pin_name7;
wire pin_name8;
wire POS1;

wire sampler;                             

// assign statements (if any)                          
CLOCK i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clk(clk),
	.d(d),
	.k(k),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6),
	.pin_name7(pin_name7),
	.pin_name8(pin_name8),
	.POS1(POS1)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

CLOCK_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

CLOCK_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.k(k),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6),
	.pin_name7(pin_name7),
	.pin_name8(pin_name8),
	.POS1(POS1),
	.sampler_rx(sampler)
);
endmodule

