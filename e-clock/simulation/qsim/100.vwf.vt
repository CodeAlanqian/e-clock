// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/26/2023 09:36:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    100
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 100_vlg_sample_tst(
	100Hz,
	K,
	RD,
	sampler_tx
);
input  100Hz;
input  K;
input  RD;
output sampler_tx;

reg sample;
time current_time;
always @(100Hz or K or RD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 100_vlg_check_tst (
	SC,
	SH,
	SL,
	sampler_rx
);
input  SC;
input [3:0] SH;
input [3:0] SL;
input sampler_rx;

reg  SC_expected;
reg [3:0] SH_expected;
reg [3:0] SL_expected;

reg  SC_prev;
reg [3:0] SH_prev;
reg [3:0] SL_prev;

reg  SC_expected_prev;
reg [3:0] SH_expected_prev;
reg [3:0] SL_expected_prev;

reg  last_SC_exp;
reg [3:0] last_SH_exp;
reg [3:0] last_SL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	SC_prev = SC;
	SH_prev = SH;
	SL_prev = SL;
end

// update expected /o prevs

always @(trigger)
begin
	SC_expected_prev = SC_expected;
	SH_expected_prev = SH_expected;
	SL_expected_prev = SL_expected;
end



// expected SC
initial
begin
	SC_expected = 1'bX;
end 
// expected SH[ 3 ]
initial
begin
	SH_expected[3] = 1'bX;
end 
// expected SH[ 2 ]
initial
begin
	SH_expected[2] = 1'bX;
end 
// expected SH[ 1 ]
initial
begin
	SH_expected[1] = 1'bX;
end 
// expected SH[ 0 ]
initial
begin
	SH_expected[0] = 1'bX;
end 
// expected SL[ 3 ]
initial
begin
	SL_expected[3] = 1'bX;
end 
// expected SL[ 2 ]
initial
begin
	SL_expected[2] = 1'bX;
end 
// expected SL[ 1 ]
initial
begin
	SL_expected[1] = 1'bX;
end 
// expected SL[ 0 ]
initial
begin
	SL_expected[0] = 1'bX;
end 
// generate trigger
always @(SC_expected or SC or SH_expected or SH or SL_expected or SL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SC = %b | expected SH = %b | expected SL = %b | ",SC_expected_prev,SH_expected_prev,SL_expected_prev);
	$display("| real SC = %b | real SH = %b | real SL = %b | ",SC_prev,SH_prev,SL_prev);
`endif
	if (
		( SC_expected_prev !== 1'bx ) && ( SC_prev !== SC_expected_prev )
		&& ((SC_expected_prev !== last_SC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SC_expected_prev);
		$display ("     Real value = %b", SC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SC_exp = SC_expected_prev;
	end
	if (
		( SH_expected_prev[0] !== 1'bx ) && ( SH_prev[0] !== SH_expected_prev[0] )
		&& ((SH_expected_prev[0] !== last_SH_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SH_expected_prev);
		$display ("     Real value = %b", SH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SH_exp[0] = SH_expected_prev[0];
	end
	if (
		( SH_expected_prev[1] !== 1'bx ) && ( SH_prev[1] !== SH_expected_prev[1] )
		&& ((SH_expected_prev[1] !== last_SH_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SH_expected_prev);
		$display ("     Real value = %b", SH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SH_exp[1] = SH_expected_prev[1];
	end
	if (
		( SH_expected_prev[2] !== 1'bx ) && ( SH_prev[2] !== SH_expected_prev[2] )
		&& ((SH_expected_prev[2] !== last_SH_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SH_expected_prev);
		$display ("     Real value = %b", SH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SH_exp[2] = SH_expected_prev[2];
	end
	if (
		( SH_expected_prev[3] !== 1'bx ) && ( SH_prev[3] !== SH_expected_prev[3] )
		&& ((SH_expected_prev[3] !== last_SH_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SH_expected_prev);
		$display ("     Real value = %b", SH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SH_exp[3] = SH_expected_prev[3];
	end
	if (
		( SL_expected_prev[0] !== 1'bx ) && ( SL_prev[0] !== SL_expected_prev[0] )
		&& ((SL_expected_prev[0] !== last_SL_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_expected_prev);
		$display ("     Real value = %b", SL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SL_exp[0] = SL_expected_prev[0];
	end
	if (
		( SL_expected_prev[1] !== 1'bx ) && ( SL_prev[1] !== SL_expected_prev[1] )
		&& ((SL_expected_prev[1] !== last_SL_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_expected_prev);
		$display ("     Real value = %b", SL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SL_exp[1] = SL_expected_prev[1];
	end
	if (
		( SL_expected_prev[2] !== 1'bx ) && ( SL_prev[2] !== SL_expected_prev[2] )
		&& ((SL_expected_prev[2] !== last_SL_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_expected_prev);
		$display ("     Real value = %b", SL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SL_exp[2] = SL_expected_prev[2];
	end
	if (
		( SL_expected_prev[3] !== 1'bx ) && ( SL_prev[3] !== SL_expected_prev[3] )
		&& ((SL_expected_prev[3] !== last_SL_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_expected_prev);
		$display ("     Real value = %b", SL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SL_exp[3] = SL_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module 100_vlg_vec_tst();
// constants                                           
// general purpose registers
reg 100Hz;
reg K;
reg RD;
// wires                                               
wire SC;
wire [3:0] SH;
wire [3:0] SL;

wire sampler;                             

// assign statements (if any)                          
100 i1 (
// port map - connection between master ports and signals/registers   
	.\100Hz (100Hz),
	.K(K),
	.RD(RD),
	.SC(SC),
	.SH(SH),
	.SL(SL)
);

// 100Hz
always
begin
	100Hz = 1'b0;
	100Hz = #5000 1'b1;
	#5000;
end 

// K
initial
begin
	K = 1'b0;
end 

// RD
initial
begin
	RD = 1'b1;
end 

100_vlg_sample_tst tb_sample (
	.100Hz(100Hz),
	.K(K),
	.RD(RD),
	.sampler_tx(sampler)
);

100_vlg_check_tst tb_out(
	.SC(SC),
	.SH(SH),
	.SL(SL),
	.sampler_rx(sampler)
);
endmodule

